"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MinutesTimer = /** @class */ (function () {
    function MinutesTimer(startTime) {
        this.timer = 0;
        this.display = '00:00';
        this.startDate = 0;
        this.pausedTime = 0;
        this.minutes = '00';
        this.seconds = '00';
        this.getSecondsFromStringTime = function (stringTime) {
            var negative = '';
            if (stringTime && typeof stringTime === 'string' && stringTime.indexOf(':') > -1) {
                var splitTime = stringTime.split(':');
                var min = splitTime[0];
                var sec = splitTime[1];
                if (min.charAt(0) === '-') {
                    negative = '-';
                    min = min.slice(1);
                }
                var myNumber = ((Number(min) * 60) + Number(sec)).toString();
                return Number("" + negative + myNumber);
            }
            else if (isNaN(Number(stringTime))) {
                throw new Error('Wrong input provided, should be string or number representing time or seconds: "01:15", 12, "12"');
            }
            return Number("" + negative + stringTime);
        };
        var localStartTime = 0;
        if (startTime) {
            localStartTime = this.getSecondsFromStringTime(startTime);
        }
        this.addTime = localStartTime * 1000;
        this.counterState = 'created';
    }
    MinutesTimer.prototype.addSeconds = function (timeInSeconds) {
        this.addTime = timeInSeconds * 1000;
    };
    MinutesTimer.prototype.stopAndChangeTime = function (timeInSeconds) {
        var localTimeInSeconds = 0;
        if (timeInSeconds) {
            localTimeInSeconds = this.getSecondsFromStringTime(timeInSeconds);
        }
        this.timer = 0;
        clearInterval(this.timerId);
        this.pausedTime = localTimeInSeconds * 1000;
        this.display = this.displayMinAndSeconds(localTimeInSeconds);
    };
    MinutesTimer.prototype.getTime = function () {
        var _this = this;
        // if (this.counterState !== 'started') {
        this.counterState = 'started';
        this.startDate = Date.now();
        this.display = this.displayMinAndSeconds(Math.floor(this.addTime / 1000));
        this.timerId = setInterval(function () { return _this.countUp(); }, 100);
        // }
        return this;
    };
    MinutesTimer.prototype.resume = function () {
        // if (this.counterState !== 'resumed') {
        this.counterState = 'resumed';
        this.getTime();
        // }
    };
    MinutesTimer.prototype.start = function () {
        this.getTime();
    };
    MinutesTimer.prototype.pause = function () {
        // if (this.counterState !== 'paused') {
        this.counterState = 'paused';
        this.pausedTime = this.timer;
        this.timer = 0;
        clearInterval(this.timerId);
        this.display = this.displayMinAndSeconds(Math.floor(this.pausedTime / 1000));
        // }
    };
    MinutesTimer.prototype.countUp = function () {
        this.timer = (Date.now() - this.startDate) + this.addTime;
        this.display = this.displayMinAndSeconds(Math.floor((this.timer + this.pausedTime) / 1000));
    };
    MinutesTimer.prototype.displayMinAndSeconds = function (seconds) {
        var negative = '';
        if (seconds < 0) {
            negative = '-';
        }
        this.minutes = String(parseInt(String(Math.abs(seconds) / 60), 10));
        this.seconds = String(parseInt(String(Math.abs(seconds) % 60), 10));
        this.minutes = Number(this.minutes) < 10 ? "0" + this.minutes : "" + this.minutes;
        this.seconds = Number(this.seconds) < 10 ? "0" + this.seconds : "" + this.seconds;
        return "" + negative + this.minutes + ":" + this.seconds;
    };
    return MinutesTimer;
}());
exports.default = MinutesTimer;
//# sourceMappingURL=index.js.map